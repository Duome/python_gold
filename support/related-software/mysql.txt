命令————

mysql -uroot -p                 登录mysql（在服务器启动的情况下）
net start mysql56（服务名称）     开启服务
net stop mysql56                关闭服务
\s                              服务器状态

linux环境下mysql命令————

登录mysql——

	mysql -uroot -p    # 本机
	mysql -h110.110.110.110 -uroot -p    # 远程主机，IP为110.110.110.110
	
修改密码——
	
	mysqladmin -u用户名 -p旧密码 password 新密码
	eg: mysqladmin -uroot -p1 password 2

增加用户——
	
	grant select on 数据库.* to 用户名@登录主机 identified by “密码”;
	
创建数据库——
	
	create database 数据库名;
	ps: 以上两个命令可以一起使用
		eg: mysqladmin -uroot -p create 数据库名    # 没有登录mysql
		
显示数据库——
	
	show databases;
	
删除数据库——
	drop databese 数据库名;
	
连接数据库——

	use 数据库名;
	
显示当前数据库——

	select database();
	ps: 相当于print
		select version()	显示当前版本
		select now()		显示当前时间
		select "字符串"		显示字符串
		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

创建数据表——
	
	create table 数据表名(字段名1 表声明,
						  字段名2 表声明,
						  ....);
	表声明——
		类型——	
			int		数字
			char	字符
			double
			tinyint
		宽度——
			(num)
		是否为空——
			not null不为空
			null 	为空
		主键——
			primary key	为主键
		自动添加——
			auto_increment
		默认值——
			default "默认值"

显示数据表——
	
	show tables;

修改数据表名——
	
	alter table 旧表名 rename 新表名;
删除数据表——
	
	drop table 数据表名;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
插入数据——
	
	insert into 数据表名 values(值1，值2.......),(第二条数据值1，值2....);
	eg: insert into students values(1, 'duome')

查询数据——

	select * from 数据表名;
	select * from 数据表名 order by id limit 0,2;   # 查询前两行数据
	select 属性 from 表名 where 表达式;   # 精确查询
	eg: select name from students where id=1;

修改数据——
	
	update 表名 set 属性=新值... where 表达式;
	eg: update students set name='小明' where id=4;
	
删除数据——

	delete from 表名 where 表达式;
	eg: delete from students where id=1;
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

增加属性——

	alter table 表名 add 属性 表声明;
	eg: alter table students add age int(3) not null;

修改属性名——

	alter table 表名 change 旧属性 新属性 属性类型（必写）;
	ps: 属性类型和旧属性类型一致
	eg: alter table students change telt phone char;
	
修改属性表声明——
	
	alter table 表名 modify;
	
删除属性——

	alter table 表名 drop 属性;
		
添加属性主键——
			
	alter table 表名 add primary key 属性名;
	
删除属性主键——
	
	alter table 表名 drop primary key;
	
添加属性外键——
		
	alter table 表名 add foreign key 属性名 references 表名(属性名)
	[on delete restrict|cascade|set null];

撤销属性外键——

	alter table 表名 drop foreign key 属性名;
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

新建索引——
	create [unique] index 索引名 on 表名(属性 [ASC|DESC], 属性 [ASC|DESC])
	unique	若多个相同值，取第一个，若省略，则所有都进入索引文件
	ASC 	升序，默认
	DESC	降序

删除索引——
	drop index 索引名

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		
查询——
	基本部分——
		select——from——where
		select子句——
			指定属性，即关系代数中的投影运算
			展示时替换属性名——
				select 属性 [as] 新属性，属性 as 新属性
				eg: select name as 姓名 from students
			展示时计算——
				select 属性-|+|*|%|/ num
				eg: select age+100 from students;
			展示时加字符串——
				select 属性，字符串，属性 
				eg: select "姓名：", name from students;
			多表查询——
				select 关系名.属性名   # 关系名即表名
				eg: select
		where子句运算符包括——
			算数	< <= > >= = <> !=
			逻辑	and or not
			集合	in not in 
			谓词	exists all some unique
			聚合	avg min max sum conunt
			嵌套	select语句
			字符串比较	s like p 
				s 	字符串
				p 	模式，特殊字符% _
					%	任何0个或多个字符进行匹配
					_	任何一个字符进行匹配
					无	与相应位置匹配，即完全一致
				eg: select * from students where name like "%小%"
		ps: 确定select和where，由...（where）找...（select）
			from 拥有以上属性的表
	格式——
		select [distinct] 属性 from 表 where 表达式;
		[group by 分组属性列表 having 组合条件表达式]   # 分组
		[order by 排序属性列 1[ASC|DESC]]	# 对输出结果排序
	简单查询——
		selcte 属性1，属性2 from 表 where 表达式;
		selcte * from 表 where 表达式;
		eg: selcte name, age from students where sex="F";
			selcte * from students where sex="F";
		投影——
			展示时替换属性名——
				select 属性 [as] 新属性，属性 as 新属性
				eg: select name as 姓名 from students
			展示时计算——
				select 属性-|+|*|%|/ num
				eg: select age+100 from students;
			展示时加字符串——
				select 属性，字符串，属性 
				eg: select "姓名：", name from students;
		选择——
		字符串比较——
			eg: select * from students where name like "%小%"
	复杂查询——
		连接运算——
			连结查询中的多个表连接，查询涉及多个关系，取多个表的数据合成一个表
			select 表1.属性，表2.属性 from 表1，表2 where 相同外键;
			eg: select s.*,c.no,sc.score from s,c,sc where s.id=sc.id and c.no=sc.no;
		元祖变量——
			连结查询中的自生连接，查询涉及同关系的多个元祖
			为出现值指定一个别名，称为元祖变量
			eg: select first.no, second.pre_no from c as first, c as second where first.pre_no=second.no; 
		并、交、差集合运算——
			并运算union——
				eg: select s.id, s.name from s,sc where s.id=sc.id and no=2 
					union
					select s.id, s.name from s,sc where s.id=sc.id and no=4;
			交运算intersect——
				eg: (select s.id, s.name from s,sc where s.id=sc.id and no=2)
					intersect
					(select s.id, s.name from s,sc where s.id=sc.id and no=4);
			查运算except——
				eg: (select s.id, s.name from s,sc where s.id=sc.id and no=2)
					except
					(select s.id, s.name from s,sc where s.id=sc.id and no=4);
		子查询——
			查询条件为某个数据，而不是属性
			select——from——where即为一个子查询
			产生标量值的子查询——
				结果为值，涉及一个表
				select id from sc where no=(select no from sc where id=3);
			包含几个关系条件的子查询——
				结果为关系，涉及多个表
				单元关系——
					exists
					in/not in
					eg: select name from s where exists(select * from sc where s.id=sc.id and no=3);
						select name from s where not exists(select * from sc where s.id=sc.id and no=3);
						select id,name from sc where id in (select id from sc where no=3)
				二元关系——
					>all
					>any
					(> < >= <= <> =)
				全称量词和逻辑蕴涵——
					
	聚集查询——
	
		运算符——
			sum总和——
			avg平均——
			min最小值——
			max最大值——
			count(*)元祖个数——
				eg: select count(*) from s;    # 求学生人数和
			count 属性列值个数——
				eg: select count(distinct no) from sc;    # 求选秀课程学生人数（distinct未算重复元祖）
		数据分组——
			group by——
				group by 属性
				eg: select no,count(id) from sc group by no;    # 先按no分组，在对每组求count
			having——
				having 条件
				eg: selcte id from sc group by id having count(*)>3;    # 先按id分组，对每组筛选符合having条件的id
		数据排列——
			order by——
				order by 属性[ASC|DESC][,属性[ASC|DESC]...]
	数据更新——
		ps: 元祖即每列数据
			用where确定是哪一个元祖，哪一个数据，哪一行
		元祖插入——
			insert into 表名 (属性1，属性2) values (值1，值2);
		元祖修改——
			update 表名 set 属性=新值... where 表达式;
			eg: update students set name='小明' where id=4;
		元祖删除——
			delect from 表名 where 条件;
			eg: delect from s where id=1;   # 删除一组数据，即一行
			ps: 没有where则是删除表
			

















	
		
		
		
		
		
		
		
	
