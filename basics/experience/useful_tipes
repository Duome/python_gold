------------------------------------------------------------------------------------------------------------------------
^^^a, b = 1, 2
------------------------------------------------------------------------------------------------------------------------
    """变量多个定义
    """
    eg: a, b = 1, 2
        a, b = (1, 2)                 # 采用这种赋值，等号两边的对象都是元祖
        (a, b) = (1, 2)
        a = 1, 2                                           # 此定义为元祖
------------------------------------------------------------------------------------------------------------------------
^^^y = x = x + 1
------------------------------------------------------------------------------------------------------------------------
    """赋值语句不会返回值，链式赋值可以
    """
    eg: y = (x = x + 1)                                          # 不合法
        y = x = x + 1                                  # 合法,支持多重赋值
------------------------------------------------------------------------------------------------------------------------
^^^if __name__ == '__main__'
------------------------------------------------------------------------------------------------------------------------
    """主程序用于测试
    """
    eg: if __name__ == '__main__'
            test()
        在作为模块导入引用时，上式为False
------------------------------------------------------------------------------------------------------------------------
^^^[for i in range(x, y) if i < z]
------------------------------------------------------------------------------------------------------------------------
   """推导式
      if条件下，在集合中收集值的推导式
      if 用于过滤，for循环可以有多个，可以对筛出来的expr进行运算或改变
      嵌套列表推到式可作列表解析
      列表、集合、字典推导式
      生成器推到式
   """
    eg: [expr for value in collection if condition]
        # 列表推导式
            eg: ['%d' % i for i in range(1,5) if i%2 == 0]
        [(a,b) for a in collection if condition for b in collection if condition]
        # 列表元素为元祖的推导式
            eg: [(a,b) for a in range(9) if a%2 == 0 for b in range(3) if b%2 !== 0]
        [list for lst in [list_all] for i in lst if condition]
        # 嵌套列表推导式
            eg: a = [[1, 2, 3], [2, 3, 4]]
                [nums for lst in a for name in lst if nums%2 != 0]
        [row[nums] for row in [list] if condition]
        # 嵌套列表推到式作列表解析
            eg: [row[1] for row in M if row[1] % 2 != 0]
                [M[i][i] for i in range(len(M))]    # 取列表中1列表1元素，类推
        { key_expr: value_expr for value in collection if condition }
        # 字典推导式
            eg: {a:b for val, key in enumerate([list])} # key是列表中的元素，value是列表的索引
        {expr for value in collection if condition}
        # 集合推导式
            eg: {len(s) for s in [list]} # 相同长度只留一个，可以筛除元素一样的数据
        (expr for iter_var in iterable)
        # 生成器推导式
            eg: a = (i + 1 for i in range(10) if i % 2 == 0) # 语法和列表推导式一致，只是带的括号不一样
                c = list(a)
        [expr if condition else expr for value in collection]
        # 条件语句中有else，if..返回expr，否则返回else的expr
            eg: ['> 2', if i > 2 else 'not > 2 for i in range(5)]
------------------------------------------------------------------------------------------------------------------------
^^^with...as...
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
^^^with...as...
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
^^^continue
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
^^^slipt()
------------------------------------------------------------------------------------------------------------------------
   """将字符串分割，分割得到以分割内容为元素的列表
   """
   eg:string.slipt()                           # 以空格作为分割点分割字符串
      string.slipt(':')                       # 以':'作为分割点将字符串分割
------------------------------------------------------------------------------------------------------------------------
^^^str.replace(old, new, max)
------------------------------------------------------------------------------------------------------------------------
   """将old中的就字符替换程new中的新字符
   """
   eg:str = 'this is string'
      print str.replace('is', 'was', 1)             # 用was替代is，最多一次
------------------------------------------------------------------------------------------------------------------------
^^^dir()
------------------------------------------------------------------------------------------------------------------------
   """
   """
------------------------------------------------------------------------------------------------------------------------
^^^print obj.__class__.__name__
------------------------------------------------------------------------------------------------------------------------
   """自省
      通过实例调出类的名字
   """
   eg: class A(object):
           pass
       a = A()
       print a.__class__.__name__
       A
------------------------------------------------------------------------------------------------------------------------
^^^str.join(seq)
------------------------------------------------------------------------------------------------------------------------
    """ 把两个字符串内容合并,比'+'节约内存
        在序列两两元素之间插入值
        在隐射两两键之间插入值
        合并目录
    """
    eg: a = 'hello '
        b = 'world!'
        ''.join([a, b])
        c = []
        for i in a:
            c.append(i)
        for i in b:
            c.append(i)
        ''.join(c)
        >>>'hello world!'
            A = list(a)
            B = list(b)
            A.extend(B)
            ''.join(A)
        seq = ['a', 'b', 'c']
        '-'.join(seq)
        >>>'a-b-c'
        dict = {'a':1, 'b':2, 'c':3}
        ':',jion(dict)
        >>>'a:b:c'
        import os
        os.path.jion('/hello/', 'good/boy/', 'dict')
        >>>'/hello/good/boy/dict'
------------------------------------------------------------------------------------------------------------------------
^^^ range(start, end, scan)
------------------------------------------------------------------------------------------------------------------------
    """ 一段间距为scan，从start开始，到end结束的计数
        start默认为0，scan默认为1
        start、end、scan都可以为负数
    """
    eg: range(5)
        >>>[0, 1, 2, 3, 4]
        range(10, 3)
        >>>[0, 3, 6, 9]
        range(-1, 1)
        >>>[-1, 0, 1]       # 从小到大，正步长相当于从左向右
        range(1, -1, -1)    # 从大到小，是上一个range的颠倒，负步长相当于从右向左看
        >>>[1, 0, -1]
        ps: 当间距为负数时，start大于end
            始终end不包含
------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
^^^
------------------------------------------------------------------------------------------------------------------------